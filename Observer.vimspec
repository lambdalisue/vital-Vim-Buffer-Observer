Describe Vim.Buffer.Observer
  Before all
    function! VitalVimBufferObserverBufReadCmd() abort
      call setline(1, ['BufReadCmd has called'])
    endfunction

  End

  Before
    let Observer = vital#gina#import('Vim.Buffer.Observer')
    %bwipeout!
    %bwipeout!
  End

  Describe behavior
    Before
      let Guard = vital#gina#import('Vim.Guard')
      let guard = Guard.store(['&autoread'])
    End

    After
      call guard.restore()
    End

    Context autoread
      Before
        set autoread
      End

      It call an attached function/command on visible buffers when 'update()' has called
        let bufnums = []

        new foo1
        autocmd BufReadCmd <buffer> call VitalVimBufferObserverBufReadCmd()
        call Observer.attach()
        call add(bufnums, bufnr('%'))

        new foo2
        autocmd BufReadCmd <buffer> call VitalVimBufferObserverBufReadCmd()
        call Observer.attach('edit')
        call add(bufnums, bufnr('%'))

        new foo3
        call Observer.attach(function('VitalVimBufferObserverBufReadCmd'))
        call add(bufnums, bufnr('%'))

        call Observer.update()

        Assert Equals(getbufline(bufnums[0], 1, '$'), ['BufReadCmd has called'])
        Assert Equals(getbufline(bufnums[1], 1, '$'), ['BufReadCmd has called'])
        Assert Equals(getbufline(bufnums[2], 1, '$'), ['BufReadCmd has called'])
      End

      It register autocmd to call an attached function/command on hidden buffers when 'update()' has called
        let bufnums = []

        new foo1
        setlocal bufhidden=hide
        call Observer.attach(function('VitalVimBufferObserverBufReadCmd'))
        call add(bufnums, bufnr('%'))
        close

        new foo2
        setlocal bufhidden=unload
        call Observer.attach(function('VitalVimBufferObserverBufReadCmd'))
        call add(bufnums, bufnr('%'))
        close

        new foo3
        setlocal bufhidden=delete
        call Observer.attach(function('VitalVimBufferObserverBufReadCmd'))
        call add(bufnums, bufnr('%'))
        close

        new foo4
        setlocal bufhidden=wipe
        call Observer.attach(function('VitalVimBufferObserverBufReadCmd'))
        call add(bufnums, bufnr('%'))
        close

        call Observer.update()

        Assert Equals(getbufline(bufnums[0], 1, '$'), [''])
        Assert Equals(getbufline(bufnums[1], 1, '$'), [])
        Assert Equals(getbufline(bufnums[2], 1, '$'), [])
        Assert Equals(getbufline(bufnums[3], 1, '$'), [])

        new foo1
        Assert Equals(bufnr('%'), bufnums[0])
        Assert Equals(getline(1, '$'), ['BufReadCmd has called'])

        new foo2
        Assert Equals(bufnr('%'), bufnums[1])
        Assert Equals(getline(1, '$'), ['BufReadCmd has called'])

        new foo3
        Assert Equals(bufnr('%'), bufnums[2])
        Assert Equals(getline(1, '$'), ['BufReadCmd has called'])

        " NOTE: foo4 has wipeout
        new foo4
        Assert NotEquals(bufnr('%'), bufnums[3])
        Assert Equals(getline(1, '$'), [''])
      End
    End

    Context noautoread
      Before
        set noautoread
      End

      It DOES NOT call an attached function/command on visible buffers when 'update()' has called
        let bufnums = []

        new foo1
        autocmd BufReadCmd <buffer> call VitalVimBufferObserverBufReadCmd()
        call Observer.attach()
        call add(bufnums, bufnr('%'))

        new foo2
        autocmd BufReadCmd <buffer> call VitalVimBufferObserverBufReadCmd()
        call Observer.attach('edit')
        call add(bufnums, bufnr('%'))

        new foo3
        call Observer.attach(function('VitalVimBufferObserverBufReadCmd'))
        call add(bufnums, bufnr('%'))

        call Observer.update()

        Assert Equals(getbufline(bufnums[0], 1, '$'), [''])
        Assert Equals(getbufline(bufnums[1], 1, '$'), [''])
        Assert Equals(getbufline(bufnums[2], 1, '$'), [''])
      End

      It register autocmd to call an attached function/command on hidden buffers when 'update()' has called but attached function/command will not be called
        let bufnums = []

        new foo1
        setlocal bufhidden=hide
        call Observer.attach(function('VitalVimBufferObserverBufReadCmd'))
        call add(bufnums, bufnr('%'))
        close

        new foo2
        setlocal bufhidden=unload
        call Observer.attach(function('VitalVimBufferObserverBufReadCmd'))
        call add(bufnums, bufnr('%'))
        close

        new foo3
        setlocal bufhidden=delete
        call Observer.attach(function('VitalVimBufferObserverBufReadCmd'))
        call add(bufnums, bufnr('%'))
        close

        new foo4
        setlocal bufhidden=wipe
        call Observer.attach(function('VitalVimBufferObserverBufReadCmd'))
        call add(bufnums, bufnr('%'))
        close

        call Observer.update()

        Assert Equals(getbufline(bufnums[0], 1, '$'), [''])
        Assert Equals(getbufline(bufnums[1], 1, '$'), [])
        Assert Equals(getbufline(bufnums[2], 1, '$'), [])
        Assert Equals(getbufline(bufnums[3], 1, '$'), [])

        new foo1
        Assert Equals(bufnr('%'), bufnums[0])
        Assert Equals(getline(1, '$'), [''])

        new foo2
        Assert Equals(bufnr('%'), bufnums[1])
        Assert Equals(getline(1, '$'), [''])

        new foo3
        Assert Equals(bufnr('%'), bufnums[2])
        Assert Equals(getline(1, '$'), [''])

        " NOTE: foo4 has wipeout
        new foo4
        Assert NotEquals(bufnr('%'), bufnums[3])
        Assert Equals(getline(1, '$'), [''])
      End
    End
  End
End
